import os
import re

configfile:"config.yaml"

input_dir = config["input_dir"]
fasta = config["fasta"]
bed = config["bed"]
ehdn_script = config["EHDN_script"]

samples = [
    re.sub(r"\.cram$", "", file)
    for file in os.listdir(input_dir)
    if file.endswith(".cram")
]

rule all:
    input:
        "results/dataset_EHdn.tsv",
        "results/hipstr.vcf.gz"

###ExpansionHunter Denovo
# Creates STR-profile per sample, containing info on STR longer than the read length of sample
rule EHdn_STR_profile:
    input:
        lambda wildcards: f"{input_dir}/{wildcards.sample}.cram"
    output:
        "results/EHdn_prep/str-profiles/{sample}.str_profile.json"
    params:
        fasta=fasta
    shell: "mkdir -p results && \
        ExpansionHunterDenovo profile \
        --reads {input} \
        --reference {params.fasta} \
        --output-prefix results/EHdn_prep/str-profiles/{wildcards.sample} \
        --min-anchor-mapq 50 \
        --max-irr-mapq 40 "
        
# Creates tsv file containing sample id, case status, and path to the associated STR-profile
rule EHdn_manifest:
    input:
        expand("results/EHdn_prep/str-profiles/{sample}.str_profile.json",sample=samples)
    output:
        "results/EHdn_prep/manifest.tsv"
    script:
        "manifest.sh"
    
# Merges STR-profiles of all samples in one file
rule Ehdn_merge_profiles:
    input:
        expand("results/EHdn_prep/str-profiles/{sample}.str_profile.json", sample=samples),
        "results/EHdn_prep/manifest.tsv"
    output:
        "results/EHdn_prep/dataset.multisample_profile.json"
    params:
        fasta=fasta
    shell:"ExpansionHunterDenovo merge \
        --reference {params.fasta} \
        --manifest results/EHdn_prep/manifest.tsv \
        --output-prefix results/EHdn_prep/dataset"

# Motif-based outlier analysis
rule ExpansionHunterDenovo:
    input:
        "results/EHdn_prep/manifest.tsv",
        "results/EHdn_prep/dataset.multisample_profile.json"
    output:
        "results/dataset_EHdn.tsv"
    shell:"{ehdn_script}/outlier.py motif \
        --manifest results/EHdn_prep/manifest.tsv \
        --multisample-profile results/EHdn_prep/dataset.multisample_profile.json \
        --output results/dataset_EHdn.tsv" \


###HipSTR 
rule HipSTR:
    input:
        expand("{dir}/{sample}.cram", dir=input_dir, sample=samples)
    output:
        "results/hipstr.vcf.gz"
    # add --def-stutter-model when sample amount <20 and --min-reads when samples are few
    shell: "ls {input_dir}/*.cram > {input_dir}/sample_files.txt | \
        HipSTR --bam-files {input_dir}/sample_files.txt \
        --fasta {fasta} \
        --regions {bed} \
        --str-vcf results/hipstr.vcf.gz \
        --def-stutter-model \
        --min-reads 15 | \
        gunzip results/hipstr.vcf.gz"
